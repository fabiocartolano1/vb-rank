import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, doc, updateDoc, addDoc } from 'firebase/firestore';

// Configuration Firebase
const firebaseConfig = {
  apiKey: 'AIzaSyAVyJsXC8G6C-U4zVJY74ipXPBA8xE0hbM',
  authDomain: 'vb-rank.firebaseapp.com',
  projectId: 'vb-rank',
  storageBucket: 'vb-rank.firebasestorage.app',
  messagingSenderId: '359434513058',
  appId: '1:359434513058:web:82616930a7644cce0345fb',
  measurementId: 'G-DGTX5LPX5C',
};

// Initialiser Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function addChampionnatToEquipes() {
  console.log('üèÜ Ajout du championnat aux √©quipes...\n');

  try {
    // 1. Cr√©er le championnat "R√©gionale 2 M" s'il n'existe pas
    console.log('üì• V√©rification du championnat "R√©gionale 2 M"...');

    const championnatsSnapshot = await getDocs(collection(db, 'championnats'));
    let regionaleM2Id: string | null = null;

    // Chercher si le championnat existe d√©j√†
    championnatsSnapshot.forEach((docSnap) => {
      const data = docSnap.data();
      if (data.nom === 'R√©gionale 2 M' || data.equipe === 'R√©gionale 2 M') {
        regionaleM2Id = docSnap.id;
        console.log(`‚úÖ Championnat "R√©gionale 2 M" trouv√© avec l'ID: ${regionaleM2Id}`);
      }
    });

    // Si le championnat n'existe pas, le cr√©er
    if (!regionaleM2Id) {
      console.log('‚ûï Cr√©ation du championnat "R√©gionale 2 M"...');
      const championnatRef = await addDoc(collection(db, 'championnats'), {
        nom: 'R√©gionale 2 M',
        equipe: 'R√©gionale 2 M',
        url: 'https://www.ffvbbeach.org/ffvbapp/resu/vbspo_calendrier.php?saison=2024/2025&codent=HERLR2HMD2',
      });
      regionaleM2Id = championnatRef.id;
      console.log(`‚úÖ Championnat cr√©√© avec l'ID: ${regionaleM2Id}`);
    }

    // 2. R√©cup√©rer toutes les √©quipes
    console.log('\nüì• R√©cup√©ration des √©quipes...');
    const equipesSnapshot = await getDocs(collection(db, 'equipes'));
    const equipes: Array<{ id: string; nom: string }> = [];

    equipesSnapshot.forEach((docSnap) => {
      const data = docSnap.data();
      equipes.push({
        id: docSnap.id,
        nom: data.nom,
      });
    });

    console.log(`‚úÖ ${equipes.length} √©quipes trouv√©es\n`);

    // 3. Mettre √† jour toutes les √©quipes avec le championnatId
    console.log('üîÑ Mise √† jour des √©quipes...');
    let updateCount = 0;
    let errorCount = 0;

    for (const equipe of equipes) {
      try {
        const equipeRef = doc(db, 'equipes', equipe.id);
        await updateDoc(equipeRef, {
          championnatId: regionaleM2Id,
        });
        console.log(`‚úÖ ${equipe.nom} -> championnatId ajout√©`);
        updateCount++;
      } catch (error) {
        console.error(`‚ùå Erreur pour ${equipe.nom}:`, error);
        errorCount++;
      }
    }

    console.log(`\n‚úÖ ${updateCount} √©quipes mises √† jour`);
    if (errorCount > 0) {
      console.log(`‚ö†Ô∏è  ${errorCount} erreurs rencontr√©es`);
    }

    console.log('\nüéâ Migration termin√©e avec succ√®s !');
    console.log(`üìã Championnat ID utilis√©: ${regionaleM2Id}`);
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    throw error;
  }
}

// Ex√©cuter la migration
addChampionnatToEquipes()
  .then(() => {
    console.log('\n‚úÖ Script termin√©');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Erreur fatale:', error);
    process.exit(1);
  });
